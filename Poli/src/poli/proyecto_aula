public static int[] posicion_vecine_libre (int f, int c, Board, board)
{
	int [] pos= new int [2];
	if (board[f - 1][c-1] ==0)
	{
		pos[0] = f -1;
		pos[1] = c -1;
		return pos;
	}
	else
	{
		if (board[f -1][c] ==0)
		{
			pos[0] = f -1;
			pos[1] = c -1;
			return pos;
		}
	}
}	

mas adelantada
	Primer 1 [0][4]
		pun1 [3][4] int f1=3, col1=4;
		pun2 [3][7] int f2=3, col2=7,
	for (int i=3; i<rows; i++){
		for(int j=0; j<cols; j++){
			if (board [i][j] ==1){
				dist1 = Math.abs(i-f1)+Math.abs(j-col1);
				dist2 = Math.abs(i-f2)+Math.abs(j-col2);
					if (dist1 < dist2){
					id (dist 1 > max){
					max = dist1;
							 }

							 }


					     }	
					}
				 }	
				 
				 
-----------------------------------------------------------------------------------------------------------------------------
public class Ejemplo

BufferedWriter bw = new BufferedWriter (new OutputStreamWriter (System.out));
BufferedReader br = new BufferedReader(new InputStreamReader (System.in));

try
{

public static int[] posicion_vecine_libre (int f, int c, Board, board)
{
	int [] pos= new int [2];
	if (board[f - 1][c-1] ==0)
	{
		pos[0] = f -1;
		pos[1] = c -1;
		return pos;
	}
	else
	{
		if (board[f -1][c] ==0)
		{
			pos[0] = f -1;
			pos[1] = c -1;
			return pos;
		}
	}
}	

mas adelantada
	Primer 1 [0][4]
	public static int[] pos_pieza_mas_adelantada (Board, board)
{
		int f1 = 3, col1 = 4; //definir interfaz izquierda
		int f2 = 3, col2 = 7; //definir interfaz derecha
		int max = 0, dist1, dist2;
		int[] pos = new int [2];//posicion de la ficha a devolver

	for (int i = 3; i<rows(board.filas); i++){
		for(int j=0; j<cols(board.columnas); j++){
			if (board [i][j] ==1){
				//distancia a la primera esquina
				dist1 = Math.abs(i - f1) + Math.abs(j - col1);
				//diatancia a la segunda esquina
				dist2 = Math.abs(i - f2) + Math.abs(j - col2);
					
					if (dist1 < dist2) //usamos dist1
					{
					if (dist 1 > max){
					max = dist1;
					pos[0] = i;
					pos[1] = j;
					 }

				}
					else {
					//usamos distancia 2
					if (dist2 > max) //usamos dist2{
					max = dist2;
					pos[0] = i;
					pos[1] = j;


catch 
	{
	(Exception e)
	}

	return pos;	 }	
	}
}
____________________________________________________________________________________
import java.io.*;

BufferedWriter bw=new BufferedWriter (new OutputStreamWriter (System.out));
BufferedReader br=new BufferedReader (new InputStreamReader (System.in));

public class Damas_Chinas
{
	Public static void main (Strings []arg)
	{
		int tablero[17][13] = 	{
				       {-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1},
				      {-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1},
				        -1,-1,-1,-1,-1,1,1,1,-1,-1,-1,-1,-1},
				     {-1,-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1},
				            {6,6,6,6,0,0,0,0,0,2,2,2,2},
				          {-1,6,6,6,0,0,0,0,0,0,2,2,2},
				           {-1,6,6,0,0,0,0,0,0,0,2,2,-1},
				         {-1,-1,6,0,0,0,0,0,0,0,0,2,-1},
				          {-1,-1,0,0,0,0,0,0,0,0,0,-1,-1},
				         {-1,-1,5,0,0,0,0,0,0,0,0,3,-1},
				           {-1,5,5,0,0,0,0,0,0,0,3,3,-1},
				          {-1,5,5,5,0,0,0,0,0,0,3,3,3},
				            {5,5,5,5,0,0,0,0,0,3,3,3,3},
				       {-1,-1,-1,-1,-1,4,4,4,4,-1,-1,-1,-1},
				        {-1,-1,-1,-1,-1,4,4,4,-1,-1,-1,-1,-1},
				      {-1,-1,-1,-1,-1,-1,4,4,-1,-1,-1,-1,-1},
				       {-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1}
				};
		// rellenar tablero
				int llenarTablero()
				{
				  int i,j,k;
					for(i=0;i<T;i++)
					    for(j=0;j<T;j++)
						{
							if(i<3&&((i+j)%2==0))
								tablero[i][j]='n';
							else
								if((i>4)&&((i+j)%2==0))
									tablero[i][j]='b';
								else
									tablero[i][j]= ' ' ;
						}
				}
					// tablero 
					int imprimirTablero()
					{
					  int k,j,i;
						system("clear");
						for(i=0;i<T;i++)
						{
							if (i==0)
							{
								printf("  ");
								for(k=0;k<T;k++)
									printf(" %d ",k);
								printf("\n");
							}

							printf("%d ",i);
							for(j=0;j<T;j++)
						  {

								printf(" %c ",tablero[i][j]);
							}
							printf("\n");
						}
					}



